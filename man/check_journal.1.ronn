check_journal -- Nagios/Icinga compatible plugin to search `journalctl` output
==============================================================================

## SYNOPSIS

`check_journal` [<OPTIONS>] <RULES_YAML>

## DESCRIPTION

`check_journal` calls `journalctl` and searches its output for lines matching
critical or warning patterns. Match rules are loaded from a YAML file. If an URL
is given instead of a local file name, the resource is retrieved first.

Rules consist of a set of patterns and a set of exceptions. A line is a match if
any pattern but no exception applies. `check_journal` gives an overall status
(**CRITICAL**, **WARNING**, **OK**, or **UNKNOWN**) and reports a match count in
`journalctl` output for both critical and warning rules.

`check_journal` reports its findings conforming to Nagios/Icinga plugin
development guidelines, making it suitable for a wide range of monitoring
systems.


## OPTIONS

* `-f`, `--statefile` <PATH>:
    Saves last log position into the specficied file and resumes at this exact
    position at the next invicaion. The file name is passed as *--cursor-file*
    option to `journalctl`. See journalctl(1) for further details.
    if `--statefile` is given, the `--span` and `--lines` options are only
    relevant on the first invocation.

* `-s`, `--span` <TIMESPEC>:
    Instructs `journalctl` to emit only records logged during the last TIMESPEC.
    See systemd.time(7) pfor time span syntax. Examples: 600s, 10m.

* `-l`, `--limit` <N>:
    Truncates report of critical and warning matches to N lines each. Alias:
    `--lines` (deprecated).

* `-L`, `--no-limit`:
    Does not truncate output. Mutually exclusive with `-l`/`--limit`.

* `-j`, `--journalctl` <PATH>:
    Specifies the journalctl executable.

* `--user`:
   Search messages from services of the current user.

## ENVIRONMENT

The environment is passed to the underlying `journalctl` call and may affects
its behaviour.


## FILES ##

<RULES_YAML> is a YAML document which has four keys on the top level:

* `criticalpatterns`
* `criticalexceptions`
* `warningpatterns`
* `warningexceptions`

Each key is followed by a list of extended regular expressions. See EXAMPLE
below.


## NOTES

Report bugs and submit feature requests at
[https://github.com/flyingcircusio/check_journal](https://github.com/flyingcircusio/check_journal).

## EXAMPLE

### Rules file

```
criticalpatterns:
      - '[Aa]bort|ABORT'
      - '[Ee]rror|ERROR'

criticalexceptions:
      - 'timestamp:".*",level:"(error|warn)"'
      - '0 errors'

warningpatterns:
      - '[Ff]ail|FAIL'
      - '[Ww]arn|WARN'

warningexceptions:
      - '0 failures'
      - 'graylogctl'
      - 'node\[.*\]: Exception'
```

### Output

```
check_journal CRITICAL - 1 critical, 0 warning line(s) found

*** Critical hits ***

Jun 06 11:47:22 host user[3966]: error
```


## EXIT STATUS

0 - OK - no matches found

1 - WARNING - warning matches found but no critical matches found

2 - CRITICAL - critical matches found

3 - UNKNOWN - an error occurred


## SEE ALSO

journalctl(1), systemd.time(7), regex(7)
